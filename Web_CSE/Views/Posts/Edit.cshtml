
@model Web_CSE.Models.Post

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Chỉnh sửa bài viết</h1>

<h4>Bài viết</h4>
<hr />
<div class="row">
    <div class="col-md-12">
        <form asp-controller="Posts" asp-action="Edit"asp-route-id="@Model.PostId" method="post" enctype="multipart/form-data">
@*            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="PostId" />
            <div class="form-group">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Describe" class="control-label"></label>
                <input asp-for="Describe" class="form-control" />
                <span asp-validation-for="Describe" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Date" class="control-label"></label>
                <input asp-for="Date" class="form-control" />
                <span asp-validation-for="Date" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Author" class="control-label"></label>
                <input asp-for="Author" class="form-control" />
                <span asp-validation-for="Author" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="AccountId" class="control-label"></label>
                <select asp-for="AccountId" class="form-control" asp-items="ViewBag.AccountId"></select>
                <span asp-validation-for="AccountId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CatId" class="control-label"></label>
                <select asp-for="CatId" class="form-control" asp-items="ViewBag.CatId"></select>
                <span asp-validation-for="CatId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Thumb" class="control-label"></label>       
                <input name="fThumb" type="file"asp-for="Thumb" class="form-control" />
                <span asp-validation-for="Thumb" class="text-danger"></span>
            </div>
            <div class="form-group">
                <img src="/images/posts/@Model.Thumb" alt="@Model.Thumb" style="max-width:200px" />
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>*@


            <div>
                <div class="form-group">

                    <dl class="row">
                        <input type="hidden" asp-for="PostId" />
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <dt class="col-sm-2">
                            <label asp-for="Title" class="control-label">Tiêu đề</label>
                        </dt>
                        <dd class="col-sm-10">
                            <input asp-for="Title" class="form-control" />
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </dd>
                        <dt class="col-sm-2">
                            <label asp-for="Contents" class="control-label">Nội dung</label>
                        </dt>
                        <dd class="col-sm-10">
                            <div class="document-editor">
                                <div class="document-editor__toolbar"></div>
                                <div class="document-editor__editable-container">
                                    <div class="document-editor__editable">
                                        <textarea name="Contents" id="contents" asp-for="Contents" class="form-control text-area"></textarea>
                                    </div>
                                </div>
                            </div>
                            <span  asp-validation-for="Contents" class="text-danger"></span>
                        </dd>
                       
                        <dt class="col-sm-2">
                            <label asp-for="Thumb" class="control-label">Ảnh đại diện</label>
                        </dt>
                        <dd class="col-sm-10">
                            @* @Html.DisplayFor(model => model.Thumb)*@
                             <img src="/images/posts/@Model.Thumb" alt="@Model.Thumb" style="max-width:200px" />
                            <input name="fThumb" type="file" asp-for="Thumb" class="form-control" value="@Model.Thumb" />
                            <input name="currentThumb" value="@Model.Thumb" type="hidden"/>
                        </dd>
                        <dt class="col-sm-2">
                            <label asp-for="AccountId" class="control-label">Tài khoản</label>
                        </dt>
                        <dd class="col-sm-10">
                            <select asp-for="AccountId" class="form-control" asp-items="ViewBag.AccountId"></select>
                        </dd>
                        <dt class="col-sm-2">
                            <label asp-for="CatId" class="control-label">Danh mục</label>
                        </dt>
                        <dd class="col-sm-10">
                            <select asp-for="CatId" class="form-control" asp-items="ViewBag.CatId"></select>
                        </dd>
                    </dl>
                </div>
                <div class="form-group post-index">
                    <input type="submit" value="Lưu" class="btn btn-primary edit-post-2 " />
                    <a asp-action="Index" class="back-to-list"><i class="fa fa-arrow-left" aria-hidden="true"></i>Trở lại</a>
                </div>
            </div>



        </form>
    </div>
</div>
<script src="~/ckeditor/translations/vi.js"></script>
<script src="~/ckfinder/ckfinder.js"></script>

<script type="text/javascript">


    class MyUploadAdapter {
        constructor(loader) {
            // The file loader instance to use during the upload.
            this.loader = loader;
        }

        // Starts the upload process.
        upload() {
            return this.loader.file
                .then(file => new Promise((resolve, reject) => {
                    this._initRequest();
                    this._initListeners(resolve, reject, file);
                    this._sendRequest(file);
                }));
        }
        //upload() {
        //    const data = new FormData();
        //    data.append('file', this.loader.file);
        //    data.append('token', this.token);
        //    data.append('key', guid() + '.jpg');

        //    return new Promise((resolve, reject) => {
        //        axios({
        //            url: '{my server url}',
        //            method: 'post',
        //            data,
        //            headers: {
        //                'X-Requested-With': 'XMLHttpRequest',
        //                'Content-Type': 'application/x-www-form-urlencoded'
        //            },
        //            withCredentials: false
        //        }).then(res => {
        //            var resData = res.data;
        //            resData.default = resData.url;
        //            resolve(resData);
        //        }).catch(error => {
        //            reject(error)
        //        });
        //    });
        //}



        // Aborts the upload process.
        abort() {
            if (this.xhr) {
                this.xhr.abort();
            }
        }

        // Initializes the XMLHttpRequest object using the URL passed to the constructor.
        _initRequest() {
            const xhr = this.xhr = new XMLHttpRequest();

            // Note that your request may look different. It is up to you and your editor
            // integration to choose the right communication channel. This example uses
            // a POST request with JSON as a data structure but your configuration
            // could be different.
            xhr.open('POST', '@Url.Action("UploadImage","Posts")', true);
            xhr.responseType = 'json';
        }

        // Initializes XMLHttpRequest listeners.
        _initListeners(resolve, reject, file) {
            const xhr = this.xhr;
            const loader = this.loader;
            const genericErrorText = `Couldn't upload file: ${file.name}.`;

            xhr.addEventListener('error', () => reject(genericErrorText));
            xhr.addEventListener('abort', () => reject());
            xhr.addEventListener('load', () => {
                const response = xhr.response;

                // This example assumes the XHR server's "response" object will come with
                // an "error" which has its own "message" that can be passed to reject()
                // in the upload promise.
                //
                // Your integration may handle upload errors in a different way so make sure
                // it is done properly. The reject() function must be called when the upload fails.
                if (!response || response.error) {
                    return reject(response && response.error ? response.error.message : genericErrorText);
                }

                // If the upload is successful, resolve the upload promise with an object containing
                // at least the "default" URL, pointing to the image on the server.
                // This URL will be used to display the image in the content. Learn more in the
                // UploadAdapter#upload documentation.
                resolve({
                    default: response.url
                });
            });

            // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
            // properties which are used e.g. to display the upload progress bar in the editor
            // user interface.
            if (xhr.upload) {
                xhr.upload.addEventListener('progress', evt => {
                    if (evt.lengthComputable) {
                        loader.uploadTotal = evt.total;
                        loader.uploaded = evt.loaded;
                    }
                });
            }
        }

        // Prepares the data and sends the request.
        _sendRequest(file) {
            // Prepare the form data.
            const data = new FormData();

            data.append('upload', file);

            // Important note: This is the right place to implement security mechanisms
            // like authentication and CSRF protection. For instance, you can use
            // XMLHttpRequest.setRequestHeader() to set the request headers containing
            // the CSRF token generated earlier by your application.

            // Send the request.
            this.xhr.send(data);
        }
    }

    function MyCustomUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
            // Configure the URL to the upload script in your back-end here!
            return new MyUploadAdapter(loader);
        };
    }

    ClassicEditor
        .create(document.querySelector('#contents'), {
            extraPlugins: [MyCustomUploadAdapterPlugin],
            Plugin: [CKFinder, Image],
            language: '~/ckeditor/translations/vi.js',
            //alignment: {
            //    options: ['left', 'right','center','justify']
            //},
            toolbar: {

                items: [                  
                    '|', 'heading',
                    '|', 'bold', 'italic',
                    '|', 'link', 'uploadImage', 'ckfinder', 'insertTable', 'mediaEmbed',
                    '|', 'bulletedList', 'numberedList', 'outdent', 'indent', 'undo', 'redo',
                    //'|', 'alignment:left', 'alignment:right', 'alignment:center', 'alignment:justify'
                ]
            },
            //ckfinder: {
            //   // tokenUrl: 'https://localhost:5001/rich-text/',
            //    uploadUrl: 'https://localhost:5001/Posts/UploadImage2',
            //},

            //image: {
            //    uploadUrl: 'https://localhost:5001/rich-text/'
            //},
            // More configuration options.
            // ...
        })
        .then(editor => {
            const toolbarContainer = document.querySelector('.document-editor__toolbar');
            toolbarContainer.appendChild(editor.ui.view.toolbar.element);

            window.editor = editor;
        })
        .catch(error => {
            console.log(error);
        });

</script>